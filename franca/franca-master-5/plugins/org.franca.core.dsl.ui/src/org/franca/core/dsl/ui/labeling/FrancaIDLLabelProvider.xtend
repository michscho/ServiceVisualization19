/*
 * generated by Xtext
 */
package org.franca.core.dsl.ui.labeling

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.franca.core.franca.FAnnotation
import org.franca.core.franca.FAnnotationBlock
import org.franca.core.franca.FArgument
import org.franca.core.franca.FAttribute
import org.franca.core.franca.FBroadcast
import org.franca.core.franca.FEnumerationType
import org.franca.core.franca.FEnumerator
import org.franca.core.franca.FField
import org.franca.core.franca.FInterface
import org.franca.core.franca.FMapType
import org.franca.core.franca.FMethod
import org.franca.core.franca.FStructType
import org.franca.core.franca.FType
import org.franca.core.franca.FUnionType
import org.franca.core.franca.FVersion
import org.franca.core.franca.Import
import com.google.inject.Inject

/** 
 * Provides labels for a EObjects.
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
class FrancaIDLLabelProvider extends DefaultEObjectLabelProvider {
	@Inject new(AdapterFactoryLabelProvider delegate) {
		super(delegate)
	}

	def String text(FVersion element) {
		return '''v«((element as FVersion)).getMajor()».«((element as FVersion)).getMinor()»'''
	}

	def String text(FAnnotationBlock element) {
		return "annotations"
	}

	def String text(FAnnotation element) {
		return '''«((element as FAnnotation)).getType().toString().replaceFirst("@", "")»:«((element as FAnnotation)).getComment()»'''
	}

	def String image(FInterface element) {
		return "interface.png"
	}

	def String image(FAttribute element) {
		return "attribute.gif"
	}

	def String image(FMethod element) {
		return "method.gif"
	}

	def String image(FField element) {
		return "field.gif"
	}

	def String image(FEnumerationType element) {
		return "enum.gif"
	}

	def String image(FEnumerator element) {
		return "enumerator.gif"
	}

	def String image(FType element) {
		return "types.gif"
	}

	def String image(FStructType element) {
		return "struct.gif"
	}

	def String image(FUnionType element) {
		return "union.gif"
	}

	def String image(FMapType element) {
		return "map.gif"
	}

	def String image(FAnnotationBlock element) {
		return "annotation.png"
	}

	def String image(FVersion element) {
		return "version.gif"
	}

	def String image(Import element) {
		return "import.gif"
	}

	def String image(FBroadcast element) {
		return "event.png"
	}

	def String image(FArgument element) {
		if (element.eContainer() instanceof FBroadcast ||
			(element.eContainer() instanceof FMethod &&
				((element.eContainer() as FMethod)).getOutArgs().contains(element))) {
			return "overlay-out.gif"
		} else {
			return "overlay-in.gif"
		}
	}
}
