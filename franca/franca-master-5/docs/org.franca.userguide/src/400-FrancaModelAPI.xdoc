chapter:FrancaModelAPI[Franca Model API]

section:FrancaModelGeneral[How can Franca models be accessed programmatically?]

The Franca model infrastructure is based on the
link[http://www.eclipse.org/modeling/emf/][Eclipse Modeling Framework (EMF)].
The ref:FrancaConcepts_IDL_CoreModel_Basic[Franca core model] is implemented as
a EMF e[ecore]-model. EMF provides a tool to generate a Java API from this e[ecore]-model.

In Franca, this Java API is provided by the e[org.franca.core] Eclipse plugin.
The Java interfaces for the API are located in package e[org.franca.core.franca].

For accessing Franca deployment models programmatically, we recommend to use
the helper classes provided by Franca and the classes automatically generated from
deployment specifications. Thus, we do not include documentation for the EMF
e[ecore]-model API of deployment models here. See section
ref:DeploymentModels_DeploymentAccessSupport[Support for accessing deployment properties]
for more details about this topic.

section:FrancaModelAPIReference[Franca Model API Reference]

section2:FrancaModelAPIReference_General[General remarks]

For each concept of Franca IDL, there is a Java interface in the API.
As all these concepts have names which are quite common in the software
architecture domain, all these API interfaces are prefixed with the
letter "F" (for Franca). Examples: e[FInterface], e[FAttribute], e[FMethod].

The following properties are common for most of these entities:

ul[
	item[e[name]: most of the Franca API entities have a name.]
	item[e[comment]: most of the Franca API entities can have a structured comment.
		The structured comment (of type e[FAnnotationBlock]) is optional and
		might contain 0..* annotations. 
	]
]

section2:FrancaModelAPIReference_FactoryAndPackage[FrancaFactory and FrancaPackage]

The API offers a singleton class e[FrancaFactory], which should be used
to create new instances of any model entities. See information about
link[http://www.eclipse.org/modeling/emf/][EMF] to find out how the
factory works. The second singleton class of the API is the e[FrancaPackage],
which does the initialization of the model and provides meta-information
like ids and others.

Here is a Java code snippet which illustrates how a Franca model element
can be created using the factory.

code[Java][
	FInterface api = FrancaFactory.eINSTANCE.createFInterface();
	api.setName("MediaPlayer");
	// and so on
]

section:FrancaModelUtils[Utility classes for Franca model access]

Accessing the Franca EMF model directly may be tedious, depending on the part of
the model which should be traversed. Franca includes a couple of utility classes
which simplify extracting data from a Franca model. This section describes those
utility classes.

section2:FrancaModelUtils_ExpressionEvaluator[Evaluating FExpression objects with the ExpressionEvaluator]

todo[The ExpressionEvaluator will be described here.]


section2:FrancaModelUtils_IntegerTypeConverter[Converting integer types with the IntegerTypeConverter]

Some downstream tools only process primitive integer types and cannot handle ranged integer types.
Franca provides the helper class code[Java][IntegerTypeConverter] which can do conversions from
ranged integer types to predefined basic integer types and vice versa.
 The following code snippet shows how to convert ranged integer types to primitive integers:

code[Java][
public void generateCode(FModel model) {
	boolean haveUnsigned = true;
	IntegerTypeConverter.removeRangedIntegers(model, haveUnsigned);
	generateCode(model);
}
]

The function code[Java][removeRangedIntegers] will choose the smallest primitive type
which can still represent the given number range.  
Therefore, for this conversion from ranged integers to predefined integers it can be configured
if in the target type system e[unsigned] types are available or not. E.g., for converting
a Franca model towards a Java platform the usage of unsigned types can be disallowed.

The class code[Java][IntegerTypeConverter] provides a second static member function
converting primitive integer types to ranged integers. There is a fixed mapping from
each primitive type to the proper range of the ranged integer. This is a code example showing
how to use this conversion function:

code[Java][
	FModel model = ...;
	IntegerTypeConverter.removePredefinedIntegers(model);
	processModel(model);
]  

This class can be used as a preprocessor for existing code generators or transformations. 
For both utility functions, the input model is transformed in-place,
i.e., its FTypeRef objects are converted directly.


section:FrancaModelAPIReference_Section_FModel[API for Franca models, interfaces and type collections]

%% ------------------------------------------------------------
todo[Some details of the ModelAPI reference section might be outdated.]

This section describes the FModel class, which is the root class for each Franca model.
			It also describes FTypeCollection as well as FInterface and all its elements (e.g.,
			attributes, methods and broadcasts.
			See the section ref:FIDL_Interface[Interface definition] in the Franca User Guide for
			detailed information about interfaces.

section2:FrancaModelAPIReference_FModel[Class FModel]

The root class of a Franca model.
It contains a list of interfaces and a set of type collections.
Other Franca models might be referenced by the 'imports' attribute.
The name of a Franca model is the package declaration. 
ul[
	item[EString e[name]: The package declaration for this model file.
	]
	item[List<ref:FrancaModelAPIReference_Import[Import]> e[imports]: The list of import statements for this model.
	]
	item[List<ref:FrancaModelAPIReference_FInterface[FInterface]> e[interfaces]: The list of interfaces which are defined in this model.
	]
	item[List<ref:FrancaModelAPIReference_FTypeCollection[FTypeCollection]> e[typeCollections]: The list of type collections in this model.
	]
]

section2:FrancaModelAPIReference_FTypeCollection[Class FTypeCollection]

A collection of Franca type definitions.
The type collection is named and should be versioned (optional).
Types defined by a ref:FrancaModelAPIReference_FTypeCollection[FTypeCollection] can be referenced from
other ref:FrancaModelAPIReference_FTypeCollection[FTypeCollection]s and ref:FrancaModelAPIReference_FInterface[FInterface]s.
ul[
	item[EString e[name] (optional): The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FVersion[FVersion] e[version] (optional): The version of this entity. The Apache major/minor scheme is applied.
	]
	item[List<ref:FrancaModelAPIReference_FType[FType]> e[types]: The list of Franca types defined in this entity.
	]
]

section2:FrancaModelAPIReference_FInterface[Class FInterface]

This class represents a Franca interface definition.
Interfaces are named and should be versioned (optional).
Types defined as part of this interface can not be referenced
by other ref:FrancaModelAPIReference_FTypeCollection[FTypeCollection]s and ref:FrancaModelAPIReference_FInterface[FInterface]s. This type visibility
differs from the types defined as part of ref:FrancaModelAPIReference_FTypeCollection[FTypeCollection]s.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FVersion[FVersion] e[version] (optional): The version of this entity. The Apache major/minor scheme is applied.
		 Inherited from base class ref:FrancaModelAPIReference_FTypeCollection[FTypeCollection].
	]
	item[List<ref:FrancaModelAPIReference_FType[FType]> e[types]: The list of Franca types defined in this entity.
		 Inherited from base class ref:FrancaModelAPIReference_FTypeCollection[FTypeCollection].
	]
	item[List<ref:FrancaModelAPIReference_FAttribute[FAttribute]> e[attributes]: The list of attributes defined for this interface.
	]
	item[List<ref:FrancaModelAPIReference_FMethod[FMethod]> e[methods]: The list of methods defined by this interface.
	]
	item[List<ref:FrancaModelAPIReference_FBroadcast[FBroadcast]> e[broadcasts]: The list of broadcasts defined by this interface.
	]
	item[ref:FrancaModelAPIReference_FContract[FContract] e[contract] (optional): The contract of this interface. A contract specifies the semantics of the interface, e.g., the order of the events across this interface.
	]
	item[ref:FrancaModelAPIReference_FInterface[FInterface] e[base] (optional): The base interface. Franca allows single inheritance.
	]
	item[List<ref:FrancaModelAPIReference_FInterface[FInterface]> e[managedInterfaces]: The list of interfaces managed by this interface. The interface will provide methods for discovery and handling of the runtime instances of the managed interfaces. The actual implementation depends on the specific target runtime platform.
	]
]

section2:FrancaModelAPIReference_FBroadcast[Class FBroadcast]

The definition of a Franca broadcast as part of an FInterface.
See the Franca IDL chapter in the Franca User Guide for very
detailed information on broadcast semantics.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[List<ref:FrancaModelAPIReference_FArgument[FArgument]> e[outArgs]: The parameters of this broadcast.
	]
	item[EString e[selective] (optional): A flag which indicates that this broadcast will not always be send to all clients. The property will be set to a concrete string if the flag is set (e.g., the string "selective"). Do not rely on the actual value of this string. If the property is null, the flag isn't set.
	]
]

section2:FrancaModelAPIReference_FArgument[Class FArgument]

This class represents an argument (aka parameter) for
a ref:FrancaModelAPIReference_FMethod[FMethod] or FBroadcast. For methods, this might be
an input or output argument. For ref:FrancaModelAPIReference_FBroadcast[FBroadcast]s, there are only
output arguments (i.e., from server to client).
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[type]: The actual type of this typed element. The type might be predefined or user-defined.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
	item[EString e[array] (optional): If the typed element is an implicit array definition, this property will be set to a string (e.g., the string '\[\]'). If the typed element is a single value (not an array), this property will be null. Do not rely on the actual value of the string.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
]

section2:FrancaModelAPIReference_FMethod[Class FMethod]

The definition of a Franca method as part of an FInterface.
Methods without out arguments might have be flagged as
'fireAndForget'. See the Franca IDL chapter in the Franca
User Guide for very detailed information on method semantics.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[EString e[fireAndForget] (optional): A flag which indicates that this method will be just a request from client to server without response. The property will be set to a concrete string if the flag is set (e.g., the string "fireAndForget"). Do not rely on the actual value of this string. If the property is null, the flag isn't set. It can be set only for methods without output arguments.
	]
	item[List<ref:FrancaModelAPIReference_FArgument[FArgument]> e[inArgs]: The list of input arguments for this method (aka input parameters).
	]
	item[List<ref:FrancaModelAPIReference_FArgument[FArgument]> e[outArgs]: The list of output arguments for this methods (aka return values).
	]
	item[ref:FrancaModelAPIReference_FEnumerationType[FEnumerationType] e[errorEnum] (optional): If this property is not null, it represents a definition of method error codes by referencing an enumeration type specified elsewhere. The enumerators of this enumeration type are the error codes the method might return. The enumeration type referenced here might reference a base enumeration. If this property is null, check the errors property instead.
	]
	item[ref:FrancaModelAPIReference_FEnumerationType[FEnumerationType] e[errors] (optional): If this property is not null, it represents a definition of method error codes by explicitly specifying a list of enumerators. These enumerators are the error codes the method might return. The enumeration type specified here might reference a base enumeration. If this property is null, check the errorEnum property instead.
	]
]

section2:FrancaModelAPIReference_FAttribute[Class FAttribute]

The definition of a Franca attribute as part of an FInterface.
See the Franca IDL chapter in the Franca User Guide for very
detailed information on attribute semantics and the flags
which can be set for attributes.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[type]: The actual type of this typed element. The type might be predefined or user-defined.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
	item[EString e[array] (optional): If the typed element is an implicit array definition, this property will be set to a string (e.g., the string '\[\]'). If the typed element is a single value (not an array), this property will be null. Do not rely on the actual value of the string.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
	item[EBoolean e[readonly] (optional): Indicates if this attribute is read-only. If false, clients are granted write access to the attribute.
	]
	item[EBoolean e[noSubscriptions] (optional): Indicates if clients can subscribe to update events for this attribute. If false, subscribing is possible. The reverse logic of this flag is to ensure a proper default in the IDL: if the keyword "noSubscriptions" is not given, subscription is possible.
	]
]

section2:FrancaModelAPIReference_FVersion[Class FVersion]

The version of this interface or type collection.
It is defined according to the Apache major/minor scheme for interfaces.
I.e., a change in the major number indicates a non-compatible change.
It is mandatory to define both major and minor numbers.
ul[
	item[EInt e[major]: The major number of this version specification (e.g., the "1" in "1.0").
	]
	item[EInt e[minor]: The minor number of this version specification (e.g., the "0" in "1.0").
	]
]

section2:FrancaModelAPIReference_Import[Class Import]

An import declaration.
It defines a namespace from some Franca resource, which
should be imported. All elements from other Franca models
referenced by this model should be member of some
imported Franca model.
ul[
	item[EString e[importedNamespace] (optional): The namespace which is addressed by this import.
	]
	item[EString e[importURI] (optional): The URI of the imported resource.
	]
]

section:FrancaModelAPIReference_Section_FType[API for Franca types]

This section describes all API classes needed for Franca type definitions.
			See the section ref:FIDL_Types[Data types] in the Franca User Guide for
			detailed information about defining types with Franca.

section2:FrancaModelAPIReference_FType[Class FType (abstract)]

This is the base class for all user-defined Franca types.
It will never be instantiated directly.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
]

section2:FrancaModelAPIReference_FMapType[Class FMapType]

The Franca map type (sometimes "map" is also called "dictionary").
This is a collection type which maps objects of a e[key] type to objects
of a e[value] type in constant time.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[keyType]: The key type which is mapped to the value type. Note: Some IDLs (e.g. D-Bus Introspection) do not allow complex types as keys. Franca doesn't have this restriction.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[valueType]: The value type of this map. It might be a predefined or a user-defined type.
	]
]

section2:FrancaModelAPIReference_FTypeRef[Class FTypeRef]

This class is a reference to some Franca type.
It may be either a ref:FIDL_PrimitiveTypes[primitive
type] (property e[predefined] or a derived type (e.g., struct, array, map).
ul[
	item[FBasicTypeId e[predefined] (optional): If the referenced type is a predefined type, this property gives the actual predefined type. If the reference type is a user-defined type, this property will be null.
	]
	item[ref:FrancaModelAPIReference_FType[FType] e[derived] (optional): If the referenced type is a user-defined type, this property gives the actual complex type definition. If the reference type is a predefined type, this property will be null.
	]
]

section2:FrancaModelAPIReference_FBasicTypeId[Enum FBasicTypeId]

This enum represents the basic types available in Franca IDL.
See section ref:FIDL_PrimitiveTypes[Primitive types] in the
Franca User Guide for a list of available primitive types and their semantics.

This enum consists of the following literals:  
e[UNDEFINED], e[INT8], e[UINT8], e[INT16], e[UINT16], e[INT32], e[UINT32], e[INT64], e[UINT64], e[BOOLEAN], e[STRING], e[FLOAT], e[DOUBLE], e[BYTE_BUFFER].

section2:FrancaModelAPIReference_FEnumerationType[Class FEnumerationType]

This class represents an enumeration type. The enumeration will contain
a list of e[enumerators]. It can be derived from a base enumeration.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[List<ref:FrancaModelAPIReference_FEnumerator[FEnumerator]> e[enumerators]: The list of enumerators of this enumeration.
	]
	item[ref:FrancaModelAPIReference_FEnumerationType[FEnumerationType] e[base] (optional): The base type of this enumeration. Will be null if this enumeration is not derived from any other enumeration.
	]
]

section2:FrancaModelAPIReference_FEnumerator[Class FEnumerator]

ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[EString e[value] (optional): The value of this enumerator. As the value definition for an enumerator is optional, value might be null.
	]
]

section2:FrancaModelAPIReference_FTypeDef[Class FTypeDef]

ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[actualType]: The actual type for this type alias.
	]
]

section2:FrancaModelAPIReference_FCompoundType[Class FCompoundType (abstract)]

This class represents all kinds of compound types in Franca, i.e., struct and union types.
A compound type has a list of fields; each field is itself specified by its type.
Thus, nested compounds can be created.
The ordering of fields in the compound is relevant. E.g., serialization code
generated from a Franca interface must take into account the order of the fields.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[List<ref:FrancaModelAPIReference_FField[FField]> e[elements]: The elements (aka fields) of this compound type.
	]
]

section2:FrancaModelAPIReference_FUnionType[Class FUnionType]

This class represents a union type in Franca. See its base class
ref:FrancaModelAPIReference_FCompoundType[FCompoundType]
for a detailed description.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[List<ref:FrancaModelAPIReference_FField[FField]> e[elements]: The elements (aka fields) of this compound type.
		 Inherited from base class ref:FrancaModelAPIReference_FCompoundType[FCompoundType].
	]
	item[ref:FrancaModelAPIReference_FUnionType[FUnionType] e[base] (optional): The base union from which this union inherits. Franca supports single inheritance for unions.
	]
]

section2:FrancaModelAPIReference_FStructType[Class FStructType]

This class represents a struct type in Franca. See its base class
ref:FrancaModelAPIReference_FCompoundType[FCompoundType]
for a detailed description.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[List<ref:FrancaModelAPIReference_FField[FField]> e[elements]: The elements (aka fields) of this compound type.
		 Inherited from base class ref:FrancaModelAPIReference_FCompoundType[FCompoundType].
	]
	item[ref:FrancaModelAPIReference_FStructType[FStructType] e[base] (optional): The base struct from which this struct inherits. Franca supports single inheritance for structs. Structs which inherit from a base struct cannot be polymorphic.
	]
	item[EBoolean e[polymorphic] (optional): Indicates if struct is the root of a polymorphic type hierarchy. Structs may be either extended from a base struct or polymorphic (or none of both).
	]
]

section2:FrancaModelAPIReference_FField[Class FField]

ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[type]: The actual type of this typed element. The type might be predefined or user-defined.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
	item[EString e[array] (optional): If the typed element is an implicit array definition, this property will be set to a string (e.g., the string '\[\]'). If the typed element is a single value (not an array), this property will be null. Do not rely on the actual value of the string.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
]

section2:FrancaModelAPIReference_FArrayType[Class FArrayType]

ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[elementType]: The type of this array's elements.
	]
]

section:FrancaModelAPIReference_Section_FContract[API for Franca contracts]

This section describes all API classes needed for Franca interface contracts. 
			The root class of the interface contract subtree is FContract.
			See the section ref:FIDL_Contracts[Contracts] in the Franca User Guide for
			detailed information about contracts.

section2:FrancaModelAPIReference_FContract[Class FContract]

The contract for a Franca interface.
The contract specifies the dynamic behaviour of the interface.
It consists of a PSM (short for: Protocol State Machine) and
an optional set of state variables.
ul[
	item[ref:FrancaModelAPIReference_FStateGraph[FStateGraph] e[stateGraph]: The protocol state machine for this contract. It might use the state variables specified by the variables property.
	]
	item[List<ref:FrancaModelAPIReference_FDeclaration[FDeclaration]> e[variables]: The declarations of all state variables used by the protocol state machine of this contract.
	]
]

section2:FrancaModelAPIReference_FDeclaration[Class FDeclaration]

This class represents the definition of a state variable
as part of a Franca interface contract. Note that the 
types available for the state variable definition are 
all types which are accessible from this interface.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[type]: The actual type of this typed element. The type might be predefined or user-defined.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
	item[EString e[array] (optional): If the typed element is an implicit array definition, this property will be set to a string (e.g., the string '\[\]'). If the typed element is a single value (not an array), this property will be null. Do not rely on the actual value of the string.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
]

section2:FrancaModelAPIReference_FStateGraph[Class FStateGraph]

A state graph specifying the interface's dynamic behavior. The state graph is flat
(i.e., non-hierarchical) and consists of a set of states, which are linked by transitions.
One of the states in the set is specified as e[initial]. I.e., this is the initial state of the interface.
ul[
	item[ref:FrancaModelAPIReference_FState[FState] e[initial]: This property references the initial state for the protocol state machine.
	]
	item[List<ref:FrancaModelAPIReference_FState[FState]> e[states]: The list of states comprising this protocol state machine. It contains the intial state.
	]
]

section2:FrancaModelAPIReference_FState[Class FState]

This class represents a single state as member of a 
ref:FrancaModelAPIReference_FStateGraph[FStateGraph].
The state contains a list of its outgoing transitions. 
The target state of each transition is contained in that transition.
ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[List<ref:FrancaModelAPIReference_FTransition[FTransition]> e[transitions]: The list of outgoing transitions for this state. These transitions lead to the successor states of this state.
	]
]

section2:FrancaModelAPIReference_FTransition[Class FTransition]

This class represents a single transition as part of a 
ref:FrancaModelAPIReference_FStateGraph[FStateGraph].
The transition references its target state by property e[to]. 
It doesn't reference its source state; instead, the source state contains
the list of its outgoing transitions.
The transition defines a e[trigger], which specifies some event which
can occur during runtime. It also defines a e[guard] condition.
If the trigger event occurs, the guard condition will be checked (if any).
Depending on this check the transition will be executed.
Finally, a transition has some e[action], which will be executed
each time when the transition fires.
ul[
	item[ref:FrancaModelAPIReference_FTrigger[FTrigger] e[trigger]: The trigger which fires this transition.
	]
	item[ref:FrancaModelAPIReference_FGuard[FGuard] e[guard] (optional): An optional guard for this transition.
	]
	item[ref:FrancaModelAPIReference_FState[FState] e[to]: The target state of this transition.
	]
	item[ref:FrancaModelAPIReference_FExpression[FExpression] e[action] (optional): An optional action which is executed each time this transition fires.
	]
]

section2:FrancaModelAPIReference_FExpression[Class FExpression (abstract)]

This is the common base class for all expressions of
the Franca contract action language.
The ref:FrancaModelAPIReference_FExpression[FExpression] class will never be instantiated.

section2:FrancaModelAPIReference_FBinaryOperation[Class FBinaryOperation]

ul[
	item[ref:FrancaModelAPIReference_FExpression[FExpression] e[left]: The left operand of the binary operation.
	]
	item[EString e[op]: The operator of this binary operation (e.g., '||', '+', '*', '<', and many more). Consider the FrancaIDL.xtext grammar definition for an overview of all binary operators supported by Franca contract action language.
	]
	item[ref:FrancaModelAPIReference_FExpression[FExpression] e[right]: The right operand of the binary operation.
	]
]

section2:FrancaModelAPIReference_FConstant[Class FConstant (abstract)]

This is the common base class for all kinds of
constants in the Franca contract action language.
The most important types are integers, booleans and strings.

section2:FrancaModelAPIReference_FStringConstant[Class FStringConstant]

This class represents strings constants in the Franca contract action language.
ul[
	item[EString e[val]: The value of this string constant (an actual string).
	]
]

section2:FrancaModelAPIReference_FBooleanConstant[Class FBooleanConstant]

This class represents boolean constants in the Franca contract action language.
ul[
	item[EBoolean e[val]: The value of this boolean constant (an actual boolean).
	]
]

section2:FrancaModelAPIReference_FIntegerConstant[Class FIntegerConstant]

This class represents integer constants in the Franca contract action language.
ul[
	item[EInt e[val]: The value of this integer constant (an actual integer).
	]
]

section2:FrancaModelAPIReference_FTypedElementRef[Class FTypedElementRef]

This class is a reference to some ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
If the referenced element is no compound type (i.e., struct or union), only the e[element] property
will be used. The e[target] and e[field] properties will be null. If a field of a compound type is referenced,
the e[field] property will point to the ref:FrancaModelAPIReference_FField[FField] object. 
If the compound type is nested, the e[target] property will reference the next outer level
(which is itself a compound referenced by a ref:FrancaModelAPIReference_FTypedElementRef[FTypedElementRef]. 
This might be chained in order to specify a reference to a deeply nested compound element.
ul[
	item[ref:FrancaModelAPIReference_FTypedElement[FTypedElement] e[element] (optional): The typed element which is actually referenced by this object.
	]
	item[ref:FrancaModelAPIReference_FTypedElementRef[FTypedElementRef] e[target] (optional): For nested compound types, this property references the next outer level. Otherwise, it is null.
	]
	item[ref:FrancaModelAPIReference_FField[FField] e[field] (optional): Specifies the field of a compound type.
	]
]

section2:FrancaModelAPIReference_FTypedElement[Class FTypedElement (abstract)]

ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[type]: The actual type of this typed element. The type might be predefined or user-defined.
	]
	item[EString e[array] (optional): If the typed element is an implicit array definition, this property will be set to a string (e.g., the string '\[\]'). If the typed element is a single value (not an array), this property will be null. Do not rely on the actual value of the string.
	]
]

section2:FrancaModelAPIReference_FVariable[Class FVariable]

ul[
	item[EString e[name]: The name of this element.
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FAnnotationBlock[FAnnotationBlock] e[comment] (optional): The structured comment for this element (if any).
		 Inherited from base class FModelElement.
	]
	item[ref:FrancaModelAPIReference_FTypeRef[FTypeRef] e[type]: The actual type of this typed element. The type might be predefined or user-defined.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
	item[EString e[array] (optional): If the typed element is an implicit array definition, this property will be set to a string (e.g., the string '\[\]'). If the typed element is a single value (not an array), this property will be null. Do not rely on the actual value of the string.
		 Inherited from base class ref:FrancaModelAPIReference_FTypedElement[FTypedElement].
	]
]

section2:FrancaModelAPIReference_FAssignment[Class FAssignment]

ul[
	item[ref:FrancaModelAPIReference_FDeclaration[FDeclaration] e[lhs]: The left-hand side of this assignment. It references the state variable which should be set by specifying its declaration.
	]
	item[ref:FrancaModelAPIReference_FExpression[FExpression] e[rhs]: The right-hand side of an assignment. This may be an arbitrary expression of the Franca contract action language.
	]
]

section2:FrancaModelAPIReference_FBlockExpression[Class FBlockExpression]

ul[
	item[List<ref:FrancaModelAPIReference_FExpression[FExpression]> e[expressions]: The sequence of expressions represented by this block. This is a composite pattern used to specify a tree of expressions.
	]
]

section2:FrancaModelAPIReference_FGuard[Class FGuard]

ul[
	item[ref:FrancaModelAPIReference_FExpression[FExpression] e[condition]: The boolean condition of this transition guard.
	]
]

section2:FrancaModelAPIReference_FTrigger[Class FTrigger]

ul[
	item[ref:FrancaModelAPIReference_FEventOnIf[FEventOnIf] e[event]: The event which will trigger this transition.
	]
]

section2:FrancaModelAPIReference_FEventOnIf[Class FEventOnIf]

This class represents a communication event,
which basically corresponds to a message on the interface.
Exactly one of its properties should be set, all other should be zero.
ul[
	item[ref:FrancaModelAPIReference_FMethod[FMethod] e[call] (optional): If this property is not null, this event represents the calling of a Franca method by a client.
	]
	item[ref:FrancaModelAPIReference_FMethod[FMethod] e[respond] (optional): If this property is not null, this event represents the response of a Franca method by the server.
	]
	item[ref:FrancaModelAPIReference_FBroadcast[FBroadcast] e[signal] (optional): If this property is not null, this event represents the sending of a Franca broadcast by the server.
	]
	item[ref:FrancaModelAPIReference_FAttribute[FAttribute] e[set] (optional): If this property is not null, this event represents the setting of a Franca attribute.
	]
	item[ref:FrancaModelAPIReference_FAttribute[FAttribute] e[update] (optional): If this property is not null, this event represents the update action of a Franca attribute.
	]
]

section:FrancaModelAPIReference_Section_FAnnotationBlock[API for Franca structured comments]

This section describes the API classes representing structured comments. 
			Note that it is a special feature of Franca that comments are available at all
			in the model. This is not the case for unstructured comments, which basically
			will be removed by the parser when creating the abstract syntax tree.
			See the section ref:FIDL_CommentsStructured[Structured comments] in the
			Franca User Guide for detailed information about structured comments.

section2:FrancaModelAPIReference_FAnnotationBlock[Class FAnnotationBlock]

This class represents a structured comment.
It is used by many of the elements of the Franca IDL model.
A structured comment consists of a list of elements with one tagged comment each.
ul[
	item[List<ref:FrancaModelAPIReference_FAnnotation[FAnnotation]> e[elements]: The elements of this annotation block. Each element represents one tagged comment.
	]
]

section2:FrancaModelAPIReference_FAnnotation[Class FAnnotation]

ul[
	item[FAnnotationType e[type] (optional): The tag of this comment (i.e., the type of this annotation).
	]
	item[EString e[comment] (optional): The actual comment as part of an FAnnotation.
	]
]

section2:FrancaModelAPIReference_FAnnotationType[Enum FAnnotationType]

This enum represents the type of a structured comment (i.e., the tag starting with a '@').

This enum consists of the following literals:  
e[DESCRIPTION], e[AUTHOR], e[EXPERIMENTAL], e[DEPRECATED], e[SEE], e[PARAM], e[HIGH_VOLUME], e[HIGH_FREQUENCY], e[SOURCE_URI], e[SOURCE_ALIAS], e[DETAILS].

