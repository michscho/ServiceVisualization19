/*******************************************************************************
 * Copyright (c) 2013 itemis AG (http://www.itemis.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.franca.examples.basic.generators

import org.franca.core.franca.FBasicTypeId
import org.franca.core.franca.FInterface
import org.franca.core.franca.FMethod
import org.franca.core.franca.FTypeRef

/**
 * This is an example code generator for plain Franca interfaces without
 * attached deployment information.
 */
class ExampleHppGenerator {
	
	/**
	 * This function is called from outside and generates code from a 
	 * Franca interface definition.
	 */
	def generateInterface (FInterface api) '''
		#ifndef __C«api.name.toUpperCase»_hpp__
		#define __C«api.name.toUpperCase»_hpp__
		«api.generateHeader»
		
		// include needed user-defined data types
		«FOR t : api.types»
		include "«t.name.toFirstUpper».hpp"
		«ENDFOR»
		
		class «api.classname»
		{
		public:
			«api.classname» (const char* address);
			
			// getters for attributes
			«FOR a : api.attributes»
			«a.type.generate» get«a.name.toFirstUpper»() const; 
			«ENDFOR»

			// methods
			«FOR m : api.methods»
			«m.generateMethodDecl» 
			«ENDFOR»
		
		private:
			// attributes
			«FOR a : api.attributes»
			«a.type.generate» m«a.name.toFirstUpper»;
			«ENDFOR»
		};
		
		#endif
	'''


	def private generateHeader (FInterface api) '''
		/**********************************************************************
		 *  The Franca Example Product Platform
		 *  (c) Copyright 2013, itemis AG
		 *  All rights reserved
		 **********************************************************************/

		/**
		 * This is a generated file for interface «api.name».
		 * Generated by Franca-based example basic generator version 0.9.0.
		 *
		 * NOTE: This code is by far not complete - it is used as an example for
		 *       code generation based on Franca IDL using Xtend (see xtend-lang.org).
		 *
		 * If you want real C++ code generation for Franca, you should consider
		 * the Common API project. See http://projects.genivi.org/commonapi/ .
		 */

		#include <stdio>
		#include "the_framework.hpp"
	'''

	def generateMethodDecl (FMethod it) '''
		void «name» («FOR a : inArgs SEPARATOR ', '»«a.type.generate» «a.name»«ENDFOR»);
	'''
	

	def generate (FTypeRef it) {
		if (derived!=null) {
			derived.name
		} else {
			switch (predefined) {
				case FBasicTypeId::INT8   : "Int8"
				case FBasicTypeId::INT16  : "Int16"
				case FBasicTypeId::INT32  : "Int32"
				case FBasicTypeId::UINT8  : "UInt8"
				case FBasicTypeId::UINT16 : "UInt16"
				case FBasicTypeId::UINT32 : "UInt32"
				case FBasicTypeId::STRING : "const String&"
				default                   : "/*" + predefined.toString + "*/"  // TODO
			}
		}		
	}

	
	// ***********************************************************************************
	// helper functions

	def getClassname (FInterface it) {
		"C" + name + "Interface"
	}

}